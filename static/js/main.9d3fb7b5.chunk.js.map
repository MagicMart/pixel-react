{"version":3,"sources":["components/Inputs.js","components/Cell.js","components/PaletteCells.js","components/Palette.js","App.js","serviceWorker.js","index.js"],"names":["Inputs","_this","this","react_default","a","createElement","className","type","style","width","value","props","onChange","e","gridWidth","target","height","gridHeight","onClick","clearCells","Component","protoTypes","PropTypes","number","isRequired","func","Cell","state","background","changeColor","setState","color","mousePaint","clearCell","clear","_this2","border","concat","onMouseLeave","isMouseDown","onMouseEnter","PaletteCells","colorChoice","Palette","arr","colors","i","length","Object","toConsumableArray","components_PaletteCells","key","paletteCells","margin","App","resetClear","mouseDown","mouseUp","id","components_Inputs","components_Palette","onMouseUp","onDragStart","preventDefault","onMouseDown","components_Cell","cells","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9d3fb7b5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Inputs extends Component {\n    render() {\n        return (\n            <form className=\"inputs\">\n                {\" \"}\n                <label>\n                    Width:\n                    {\"  \"}\n                    <input\n                        type=\"number\"\n                        style={{ width: \"48px\" }}\n                        value={this.props.width}\n                        onChange={e => this.props.gridWidth(e.target.value)}\n                    />\n                </label>\n                <label>\n                    {\"  \"}\n                    Height:{\" \"}\n                    <input\n                        type=\"number\"\n                        style={{ width: \"48px\" }}\n                        value={this.props.height}\n                        onChange={e => this.props.gridHeight(e.target.value)}\n                    />{\" \"}\n                </label>\n                <input\n                    type=\"button\"\n                    style={{ width: \"68px\" }}\n                    value=\"Clear\"\n                    onClick={this.props.clearCells}\n                />\n            </form>\n        );\n    }\n}\n\nInputs.protoTypes = {\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    gridWidth: PropTypes.func.isRequired,\n    gridHeight: PropTypes.func.isRequired,\n    clearCells: PropTypes.func.isRequired\n};\n\nexport default Inputs;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Cell extends Component {\n    state = { background: \"white\" };\n\n    changeColor = () => {\n        this.setState(function(state) {\n            return state.background === \"white\"\n                ? { background: this.props.color }\n                : { background: \"white\" };\n        });\n    };\n    mousePaint = () => {\n        this.setState(function() {\n            return { background: this.props.color };\n        });\n    };\n    clearCell = () => {\n        this.setState({ background: \"white\" });\n    };\n\n    componentDidUpdate() {\n        if (this.props.clear && this.state.background !== \"white\") {\n            this.clearCell();\n        }\n    }\n\n    render() {\n        return (\n            <div\n                className=\"cell\"\n                style={{\n                    background: this.state.background,\n                    border:\n                        this.state.background === \"white\"\n                            ? \"black solid 1px\"\n                            : `${this.state.background} solid 1px`\n                }}\n                onClick={() => this.changeColor()}\n                onMouseLeave={() => {\n                    if (this.props.isMouseDown) {\n                        this.mousePaint();\n                    }\n                }}\n                onMouseEnter={() => {\n                    if (this.props.isMouseDown) {\n                        this.mousePaint();\n                    }\n                }}\n            />\n        );\n    }\n}\n\nCell.propTypes = {\n    clear: PropTypes.bool.isRequired,\n    isMouseDown: PropTypes.bool.isRequired\n};\n\nexport default Cell;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction PaletteCells(props) {\n    return (\n        <div\n            className=\"cell\"\n            onClick={e => props.colorChoice(e)}\n            style={{ background: props.color }}\n        />\n    );\n}\n\nPaletteCells.propTypes = {\n    colorChoice: PropTypes.func.isRequired,\n    color: PropTypes.string.isRequired\n};\n\nexport default PaletteCells;\n","import React from \"react\";\nimport PaletteCells from \"./PaletteCells\";\nimport PropTypes from \"prop-types\";\n\nfunction Palette(props) {\n    const paletteCells = () => {\n        let arr = [];\n        const colors = [\n            \"red\",\n            \"orange\",\n            \"yellow\",\n            \"green\",\n            \"blue\",\n            \"indigo\",\n            \"violet\",\n            \"black\",\n            \"#ffffff\",\n            \"gray\"\n        ];\n        for (let i = 0; i < colors.length; i += 1) {\n            arr = [\n                ...arr,\n                <PaletteCells\n                    colorChoice={props.colorChoice}\n                    color={colors[i]}\n                    key={i}\n                />\n            ];\n        }\n        return arr;\n    };\n    return (\n        <div className=\"palette\">\n            {paletteCells()}{\" \"}\n            <div\n                className=\"cell\"\n                onClick={e => props.colorChoice(e)}\n                style={{\n                    margin: \"0 0 0 5px\",\n                    background: \"white\",\n                    border: \"2px solid black\"\n                }}\n            >\n                E\n            </div>\n        </div>\n    );\n}\n\nPalette.propTypes = {\n    colorChoice: PropTypes.func.isRequired\n};\n\nexport default Palette;\n","import React, { Component } from \"react\";\nimport Inputs from \"./components/Inputs\";\nimport Cell from \"./components/Cell\";\nimport Palette from \"./components/Palette\";\nimport \"./App.css\";\n\nclass App extends Component {\n    state = {\n        width: 10,\n        height: 10,\n        color: \"black\",\n        clear: false,\n        isMouseDown: false\n    };\n\n    gridWidth = width => {\n        if (width >= 0 && width <= 23) {\n            this.setState({ width, clear: true });\n        }\n    };\n    gridHeight = height => {\n        if (height >= 0 && height <= 23) {\n            this.setState({ height, clear: true });\n        }\n    };\n    resetClear = () => {\n        this.setState({ clear: false });\n    };\n    clearCells = () => {\n        this.setState({ clear: true });\n    };\n    mouseDown = e => {\n        this.setState(() => {\n            return { isMouseDown: true };\n        });\n    };\n    mouseUp = () => {\n        this.setState(() => {\n            return { isMouseDown: false };\n        });\n    };\n\n    componentDidUpdate() {\n        if (this.state.clear) {\n            this.resetClear();\n        }\n    }\n    colorChoice = e => {\n        this.setState({ color: e.target.style.background });\n    };\n\n    render() {\n        const cells = () => {\n            let arr = [];\n            for (let i = 0; i < this.state.width * this.state.height; i += 1) {\n                arr = [\n                    ...arr,\n                    <Cell\n                        isMouseDown={this.state.isMouseDown}\n                        clear={this.state.clear}\n                        key={i}\n                        color={this.state.color}\n                    />\n                ];\n            }\n            return arr;\n        };\n\n        return (\n            <div className=\"App\">\n                <div className=\"container\">\n                    <h1 id=\"heading\">Pixel Art Maker</h1>\n                    <Inputs\n                        width={this.state.width}\n                        height={this.state.height}\n                        gridWidth={this.gridWidth}\n                        gridHeight={this.gridHeight}\n                        clearCells={this.clearCells}\n                    />\n                    <Palette colorChoice={this.colorChoice} />\n                    <div\n                        className=\"grid\"\n                        onMouseLeave={this.mouseUp}\n                        onMouseUp={this.mouseUp}\n                        onDragStart={e => {\n                            e.preventDefault();\n                        }}\n                        onMouseDown={this.mouseDown}\n                        style={{\n                            width: this.state.width * 20 + \"px\",\n                            height: this.state.height * 20 + \"px\"\n                        }}\n                    >\n                        {cells()}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}